source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/Gobi_Metabolomics.R')
source('~/Gobi_Metabolomics.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/Gobi_Metabolomics.R')
View(results)
View(results)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
View(filtered)
View(filtered)
source('~/.active-rstudio-document')
View(filtered)
View(filtered)
source('~/.active-rstudio-document')
View(filtered)
View(filtered)
source('~/.active-rstudio-document')
View(filtered)
View(filtered)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
View(filtered)
View(filtered)
View(filtered)
View(filtered)
source('~/.active-rstudio-document')
View(filtered)
View(filtered)
source('~/.active-rstudio-document')
View(filtered)
View(filtered)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
View(filtered)
View(filtered)
View(filtered)
View(filtered)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
View(filtered)
View(filtered)
source('~/.active-rstudio-document')
View(filtered)
View(filtered)
source('~/.active-rstudio-document')
View(filtered)
View(filtered)
source('~/.active-rstudio-document')
View(filtered)
View(filtered)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
View(filtered)
View(filtered)
a <- matrix([[1,4],2,3])
source('~/.active-rstudio-document')
data(breast)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
data<-readCsv('kidney_s1.tsv',sep='\t',header=T)
data<-read.csv('kidney_s1.tsv',sep='\t',header=T)
filename<-'home/sch/schmidka/Dokumente/Masterpraktikum/Assignment3/kidney_s1.tsv'
data<-read.csv(filename,sep='\t',header=T)
filename<-'/home/sch/schmidka/Dokumente/Masterpraktikum/Assignment3/kidney_s1.tsv'
data<-read.csv(filename,sep='\t',header=T)
data
head(data)
N<-sum(data$raw)
N
data$CPM<-data$raw*10^6/N
head(data$CPM)
dat$CPM
data$CPM
h<-hist(data$CPM)
h
histBreaks<-seq(1,5000,by=500)
histBreaks
h<-hist(data$CPM,breaks=histBreaks)
histBreaks<-c(seq(1,5000,by=500),max(data$CPM))
h<-hist(data$CPM,breaks=histBreaks)
histBreaks<-c(seq(1,5000,by=500),max(data$CPM)+1)
h<-hist(data$CPM,breaks=histBreaks)
histBreaks
histBreaks<-c(seq(0,5000,by=500),max(data$CPM)+1)
h<-hist(data$CPM,breaks=histBreaks)
histBreaks<-c(seq(0,1000,by=100),max(data$CPM)+1)
h<-hist(data$CPM,breaks=histBreaks)
h$counts
histBreaks<-c(seq(0,500,by=50),max(data$CPM)+1)
h<-hist(data$CPM,breaks=histBreaks,plot=F)
h$counts
cumsum(h)
cumsum(h$counts)
h
h$mids
h$mids[-1]
h$mids[-length(h$mids)]
plot(hcumu[-length(h$mids)], h$mids[-length(h$mids)])
hcumu<-cumsum(h$counts)
plot(hcumu[-length(h$mids)], h$mids[-length(h$mids)])
plot(hcumu[-length(h$mids)], h$mids[-length(h$mids)], type=l)
plot(hcumu[-length(h$mids)], h$mids[-length(h$mids)])
plot(h$mids[-length(h$mids)],hcumu[-length(h$mids)])
hcum<-h
hcum$counts<-cumsum(h$counts)
plot(hcum)
filename2<-'/home/sch/schmidka/Dokumente/Masterpraktikum/Assignment3/kidney_s2.tsv'
data2<-read.csv(filename2,sep='\t',header=T)
filename2<-'/home/sch/schmidka/Dokumente/Masterpraktikum/Assignment3/kidney_s2.tsv'
data2<-read.csv(filename2,sep='\t',header=T)
#Normalization
N2<-sum(data2$raw)
data2$CPM<-data2$raw*10^6/N2
head(data2)
data2$gene_id==data$gene_id
sum(data2$gene_id==data$gene_id)
length(data$gene_id)
completeSet<-merge(data,data2)
head(completeSet)
completeSet<-merge(data,data2,by=gene_id)
completeSet<-merge(data,data2,by="gene_id")
head(completeset)
head(completeSet)
plot(CPM.x,CPM.y)
plot(completeSet$CPM.x,completeSet$CPM.y)
correlation<-corr(completeSet$CPM.x,completeSet$CPM.y,type='Pearson')
correlation<-cor(completeSet$CPM.x,completeSet$CPM.y,type='Pearson')
correlation<-cor(completeSet$CPM.x,completeSet$CPM.y,method='Pearson')
correlation<-cor(completeSet$CPM.x,completeSet$CPM.y,method='pearson')
correlation
filename3<-'/home/sch/schmidka/Dokumente/Masterpraktikum/Assignment3/liver_s1.tsv'
data_liver1<-read.csv(filename3,sep='\t',header=T)
#Normalization
N3<-sum(data_liver1$raw)
data_liver1$CPM<-data_liver1$raw*10^6/N3
filename4<-'/home/sch/schmidka/Dokumente/Masterpraktikum/Assignment3/liver_s2.tsv'
data_liver2<-read.csv(filename4,sep='\t',header=T)
#Normalization
N4<-sum(data_liver2$raw)
data_liver2$CPM<-data_liver2$raw*10^6/N4
completeSet$pooledCounts<-completeSet$CPM.x+completeSet$CPM.y
completeSet_liver<-merge(data_liver1,data_liver2,by="gene_id")
head(completeSet_liver)
completeSet_liver$pooledCounts<-completeSet_liver$CPM.x+completeSet_liver$CPM.y
head(completeSet_liver)
completeSet_liver
foldChange<-merge(completeSet,completeSet_liver,by="gene_id")
foldChange
head(foldchange)
head(foldChange)
foldChange[,c('gene_id')]
completeSet$pooledCounts_Kidney<-completeSet$CPM.x+completeSet$CPM.y
completeSet_liver<-merge(data_liver1,data_liver2,by="gene_id")
completeSet_liver$pooledCounts_Liver<-completeSet_liver$CPM.x+completeSet_liver$CPM.y
foldChange<-merge(completeSet,completeSet_liver,by="gene_id")[,c('gene_id', 'pooledCounts_Kidney', 'pooledCounts_Liver')]
head(foldChange)
filtered_foldChange<-foldChange[pooledCounts_Kidney>0 & pooledCounts_Liver>0]
filtered_foldChange<-foldChange[pooledCounts_Kidney>0 & pooledCounts_Liver>0]
tail(data_liver1)
10^2
10^4
filtered_foldChange<-foldChange[foldChange$pooledCounts_Kidney>0 & pooledCounts_Liver>0]
filtered_foldChange<-foldChange[foldChange$pooledCounts_Kidney>0 & foldChange$pooledCounts_Liver>0]
filtered_foldChange<-foldChange[,foldChange$pooledCounts_Kidney>0 & foldChange$pooledCounts_Liver>0]
foldChange[,1]
filtered_foldChange<-foldChange[foldChange$pooledCounts_Kidney>0 & foldChange$pooledCounts_Liver>0,]
head(filtered_foldChange)
sum(filtered_foldChange$pooledCounts_Kidney==0)
sum(filtered_foldChange$pooledCounts_Liver==0)
read.csv('/home/sch/schmidka/Dokumente/Masterpraktikum/Assignment3/genes.gtf')
require(rtracklayer)
install.packages('rtracklayer')
source("https://bioconductor.org/biocLite.R")
biocLite("rtracklayer")
require(rtracklayer)
gtf <- readGFF('/home/sch/schmidka/Dokumente/Masterpraktikum/Assignment3/gencode.v13.annotation.gtf', version=2L)
gtf$type=='gene'
sum(gtf$type=='gene')
source("https://bioconductor.org/biocLite.R")
biocLite("GenomicFeatures")
library("GenomicFeatures")
data<-makeTxDbFromGFF('/home/sch/schmidka/Dokumente/Masterpraktikum/Assignment3/gencode.v13.annotation.gtf', format='gff3')
data<-makeTxDbFromGFF('/home/sch/schmidka/Dokumente/Masterpraktikum/Assignment3/gencode.v13.annotation.gtf', format='gtf')
exons<-exonsBy(data,by="gene")
head(exons)
data
transcripts(dat)
transcripts(data)
genes(data)
exons<-exonsBy(data,by="gene")
exons<-exonsBy(data,by="gene")
exons
data
summary(data)
table(data)
str(data)
exons<-exonsBy(data,by="transcript")
exons<-exonsBy(data,by="tx")
exons
t<-transcriptsBy(data,by="exon")
keytypes(data)
t
keytypes(data)
columns(data)
data@.xData
data@.xData$getClass
install.packages("data.table")
library("data.table")
data<-fread('/home/sch/schmidka/Dokumente/Masterpraktikum/Assignment3/gencode.v13.annotation.gtf',sep=";",sep2=":",skip=5)
data<-fread('/home/sch/schmidka/Dokumente/Masterpraktikum/Assignment3/gencode.v13.annotation.gtf',sep=";",skip=5)
data<-fread('/home/sch/schmidka/Dokumente/Masterpraktikum/Assignment3/gencode.v13.annotation.gtf',sep="\t",skip=5)
head(data)
data<-makeTxDbFromGFF('/home/sch/schmidka/Dokumente/Masterpraktikum/Assignment3/gencode.v13.annotation.gtf', format='gtf')
exons<-exonsBy(data,by="gene")
genes(data)
#Aufgabe 1a: transcripts - number of exons, Unterscheidung zwischen protein coding und lncRNA (gene type)
exons<-exonsBy(data,by="tx")
features(data)
columns(data)
head(keys(data,"TXTYPE"))
keys(data,"TXTYPE")
data2<-makeTxDbFromGFF('/home/sch/schmidka/Dokumente/Masterpraktikum/Assignment3/gencode.v13.annotation.gtf', geneType=character())
data2<-makeTxDbFromGFF('/home/sch/schmidka/Dokumente/Masterpraktikum/Assignment3/gencode.v13.annotation.gtf', genetype=character())
asGFF(data)
unique(asGFF(data)@type)
a<-asGFF(data)
a@metadata
a@metadata[[1]]
a@metadata[1]
a@metadata
a$type
unique(a$type)
metadata(data)
seqinfo(data)
isActiveSeq(data)
as.list(data)
require(rtracklayer)
gtf <- readGFF('/home/sch/schmidka/Dokumente/Masterpraktikum/Assignment3/gencode.v13.annotation.gtf', version=2L)
gtf<-import('/home/sch/schmidka/Dokumente/Masterpraktikum/Assignment3/gencode.v13.annotation.gtf')
head(gtf)
exonsBy(gtf)
data_new<-makeTxDbFromGRanges(gtf)
genes(data_new)
allInfo<-import('/home/sch/schmidka/Dokumente/Masterpraktikum/Assignment3/gencode.v13.annotation.gtf')
data<-makeTxDbFromGRanges(allInfo)
allInfo$gene_type
tLengths<-transcriptLength(data)
tLengths<-transcriptLengths(data)
head(tLengths)
allInfo$gene_type
unique(allInfo$gene_type)
allInfo
unique(allInfo$type)
allInfo$transcript_id
allInfo$transcript_id[allInfo$gene_type=="proteinCoding"]
allInfo$transcript_id[allInfo$gene_type=="protein_coding"]
library(shiny)
source('~/Dokumente/GeneExpressionPrediction/neap/interactivePlots/server.R')
install.packages("shiny")
source('~/Dokumente/GeneExpressionPrediction/neap/interactivePlots/server.R')
install.packages("plotly")
install.packages("plotly")
source('~/Dokumente/GeneExpressionPrediction/neap/interactivePlots/ui.R')
source('~/Dokumente/GeneExpressionPrediction/neap/interactivePlots/server.R')
library(shiny)
source('~/Dokumente/GeneExpressionPrediction/neap/InteractivePlots/server.R')
system("python ~/Dokumente/GeneExpressionPrediction/neap/methods/classification_withStoredModel -i ~/Desktop/InputFiles/input_mRNA_normalized.txt -l ~/Desktop/InputFiles/testLabels_median.txt -m ~/Desktop/model.pkl -a -n
")
system("python3 ~/Dokumente/GeneExpressionPrediction/neap/methods/classification_withStoredModel -i ~/Desktop/InputFiles/input_mRNA_normalized.txt -l ~/Desktop/InputFiles/testLabels_median.txt -m ~/Desktop/model.pkl -a -n
")
system("/home/sch/schmidka/anaconda3/lib/python3.6 ~/Dokumente/GeneExpressionPrediction/neap/methods/classification_withStoredModel -i ~/Desktop/InputFiles/input_mRNA_normalized.txt -l ~/Desktop/InputFiles/testLabels_median.txt -m ~/Desktop/model.pkl -a -n
")
system("ls")
system("python -V")
system("python3 -V")
system("python3.6 -V")
system("bash ~/Desktop/callPython.sh")
Sys.setenv(PATH = paste("/usr/local/bin", Sys.getenv("PATH"),sep=":"))
system("python -V")
Sys.getenv("PATH")
Sys.setenv(PATH = "/usr/local/bin")
Sys.setenv(PATH = "/home/sch/schmidka/bin")
system("python -V")
Sys.setenv(PATH = "/usr/local/bin")
system("python -V")
Sys.getenv("PATH")
Sys.getenv("PATH")="/usr/local/bin:/home/sch/schmidka/bin:/usr/local/bin:/bin:/usr/bin:/usr/X11R6/bin:/opt/bin:/usr/games:/soft/bin:/soft/IFI/pkg/bin:/soft/IFI/pkg/sbin:."
Sys.setenv("PATH"="/usr/local/bin:/home/sch/schmidka/bin:/usr/local/bin:/bin:/usr/bin:/usr/X11R6/bin:/opt/bin:/usr/games:/soft/bin:/soft/IFI/pkg/bin:/soft/IFI/pkg/sbin:.")
Sys.getenv("PATH")
system("python -V")
system("/home/sch/schmidka/anaconda3/bin/python  ~/Dokumente/GeneExpressionPrediction/neap/methods/classification_withStoredModel -i ~/Desktop/InputFiles/input_mRNA_normalized.txt -l ~/Desktop/InputFiles/testLabels_median.txt -m ~/Desktop/model.pkl -a -n")
dummyData=data.frame(dataset=c("dataset1","dataset2","dataset3"),scores=c(0.8,0.7,0.9))
plot_ly(
x = dummyData$dataset,
y = dummyData$scores,
name = "Boxplot",
type = "bar")%>%
layout(title='Comparison of the current prediction with prediction on other datasets',
xaxis = list(
title = "Data set"),
yaxis = list(
title = "AUC score"
)
)
library(plotly)
plot_ly(
x = dummyData$dataset,
y = dummyData$scores,
name = "Boxplot",
type = "bar")%>%
layout(title='Comparison of the current prediction with prediction on other datasets',
xaxis = list(
title = "Data set"),
yaxis = list(
title = "AUC score"
)
)
dummayData$dataset
dummyData$dataset
dummyData$scores
plot_ly(
x = dummyData$dataset,
y = dummyData$scores,
name = "Boxplot",
type = "bar")
plot_ly(
x = as.factor(dummyData$dataset),
y = dummyData$scores,
name = "Boxplot",
type = "bar")
plot_ly(
x = as.factor(dummyData$dataset),
y = as.numeric(dummyData$scores),
name = "Boxplot",
type = "bar")
as.factor(dummyData$dataset)
as.numeric(dummyData$scores)
plot_ly(
x = as.factor(as.character(dummyData$dataset)),
y = as.numeric(dummyData$scores),
name = "Boxplot",
type = "bar")
plot_ly(
x = dummyData[,1],
y = dummyData[,2],
name = "Boxplot",
type = "bar")
plot_ly(
x = c("d1","d2"),
y = c(1,5),
name = "Boxplot",
type = "bar")
plot_ly(
x = as.factor(row.names(summaryClasses)),
y = summaryClasses[,1],
name = "Boxplot",
type = "bar")%>%
layout(title='Classification of lncRNAs',
xaxis = list(
title = "lncRNA classes"),
yaxis = list(
title = "Number of transcripts"
)
)
dummyData=data.frame(dataset=c("dataset1","dataset2","dataset3"),scores=c(0.8,0.7,0.9))
plot_ly(
x = dummyData$dataset,
y = dummyData$scores,
name = "Boxplot",
type = "bar")%>%
layout(title='Comparison of the current prediction with prediction on other datasets',
xaxis = list(
title = "Data set"),
yaxis = list(
title = "AUC score"
)
)
dummyData
summaryClasses<-dummyData
plot_ly(
x = as.factor(row.names(summaryClasses)),
y = summaryClasses[,1],
name = "Boxplot",
type = "bar")%>%
layout(title='Classification of lncRNAs',
xaxis = list(
title = "lncRNA classes"),
yaxis = list(
title = "Number of transcripts"
)
)
summaryClasses[,1]
summaryClasses[,2]
plot_ly(
x = as.factor(row.names(summaryClasses)),
y = summaryClasses[,2],
name = "Boxplot",
type = "bar")%>%
layout(title='Classification of lncRNAs',
xaxis = list(
title = "lncRNA classes"),
yaxis = list(
title = "Number of transcripts"
)
)
p <- plot_ly(
x = c("giraffes", "orangutans", "monkeys"),
y = c(20, 14, 23),
name = "SF Zoo",
type = "bar"
)
p
plot_ly(
x = c("giraffes", "orangutans", "monkeys"),
y = c(20, 14, 23),
name = "SF Zoo",
type = "bar"
)
setwd("/home/sch/schmidka/Dokumente/GeneExpressionPrediction/neap/InteractivePlots/")
filename = "PlotInput/dataMatrix.txt"
titleString = "AUC Score"
data<-read.csv(filename,sep="\t",header=F)
colnames(plottedData)<-c("Method","Trainset","Testset","Score")
#Create heatmap
p<-ggplot(data = plottedData, aes(x = Trainset, y = Testset)) +
geom_tile(aes(fill = Score))+
scale_fill_gradient2(low = "white",mid="yellow", high = "red",midpoint=0.5, limits=c(0.0,1.0))+
ggtitle("Predicting on a different data set")+
labs(x="Training Set",y="Test Set")
library(ggplot2)
colnames(plottedData)<-c("Method","Trainset","Testset","Score")
#Create heatmap
p<-ggplot(data = plottedData, aes(x = Trainset, y = Testset)) +
geom_tile(aes(fill = Score))+
scale_fill_gradient2(low = "white",mid="yellow", high = "red",midpoint=0.5, limits=c(0.0,1.0))+
ggtitle("Predicting on a different data set")+
labs(x="Training Set",y="Test Set")
plottedData<-data
colnames(plottedData)<-c("Method","Trainset","Testset","Score")
#Create heatmap
p<-ggplot(data = plottedData, aes(x = Trainset, y = Testset)) +
geom_tile(aes(fill = Score))+
scale_fill_gradient2(low = "white",mid="yellow", high = "red",midpoint=0.5, limits=c(0.0,1.0))+
ggtitle("Predicting on a different data set")+
labs(x="Training Set",y="Test Set")
p
reshapedData<-melt(data, id=c("V1","V2", "V3"))
library(reshape)
library(reshape2)
reshapedData<-melt(data, id=c("V1","V2", "V3"))
data<-read.csv(filename,sep="\t",header=F)
matches <- grepl(paste("LR",collapse="|"), data$V1)
plottedData<-data[matches,]
colnames(plottedData)<-c("Method","Trainset","Testset","Score")
#Create heatmap
p<-ggplot(data = plottedData, aes(x = Trainset, y = Testset)) +
geom_tile(aes(fill = Score))+
scale_fill_gradient2(low = "white",mid="yellow", high = "red",midpoint=0.5, limits=c(0.0,1.0))+
ggtitle("Predicting on a different data set")+
labs(x="Training Set",y="Test Set")
p
head(plottedData)
head(data)
unique(data$V1)
filename = "PlotInput/dataMatrixReg.txt"
titleString = "R2 Score"
data<-read.csv(filename,sep="\t",header=F)
matches <- grepl(paste("LR",collapse="|"), data$V1)
plottedData<-data[matches,]
colnames(plottedData)<-c("Method","Trainset","Testset","Score")
#Create heatmap
p<-ggplot(data = plottedData, aes(x = Trainset, y = Testset)) +
geom_tile(aes(fill = Score))+
scale_fill_gradient2(low = "white",mid="yellow", high = "red",midpoint=0.5, limits=c(0.0,1.0))+
ggtitle("Predicting on a different data set")+
labs(x="Training Set",y="Test Set")
p
plottedData$V4
plottedData$Score
plottedData$Score<0
data<-read.csv(filename,sep="\t",header=F)
head(data)
source('~/Dokumente/GeneExpressionPrediction/neap/SmallPlottingScripts/dataComparisonMatriPlot.R')
getwd()
filename = "PlotInput/dataMatrix.txt"
titleString = "AUC Score"
data<-read.csv(filename,sep="\t",header=F)
head(data)
matches <- grepl(paste("RF",collapse="|"), data$V1)
plottedData<-data[matches,]
plottedData
plottedData$V4[plottedData$V4<0]<-0
colnames(plottedData)<-c("Method","Trainset","Testset","Score")
#Create heatmap
p<-ggplot(data = plottedData, aes(x = Trainset, y = Testset)) +
geom_tile(aes(fill = Score))+
scale_fill_gradient2(low = "#dd2288",mid="#3300ee", high = "#33dd00",midpoint=0.5, limits=c(0.0,1.0))+
ggtitle("Predicting on a different data set")+
labs(x="Training Set",y="Test Set")
p
source('~/Dokumente/GeneExpressionPrediction/neap/SmallPlottingScripts/dataComparisonMatriPlot.R')
